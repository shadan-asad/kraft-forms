// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  forms         Form[]

  @@map("users")
}

model Form {
  id            String        @id @default(uuid())
  title         String
  description   String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields        FormField[]
  submissions   Submission[]

  @@map("forms")
}

model FormField {
  id            String    @id @default(uuid())
  fieldId       String    @map("field_id")
  type          String
  label         String
  required      Boolean   @default(false)
  formId        String    @map("form_id")
  form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  responses     FieldResponse[]

  @@unique([formId, fieldId])
  @@map("form_fields")
}

model Submission {
  id            String          @id @default(uuid())
  formId        String          @map("form_id")
  form          Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  submittedAt   DateTime        @default(now()) @map("submitted_at")
  responses     FieldResponse[]

  @@map("submissions")
}

model FieldResponse {
  id            String        @id @default(uuid())
  fieldId       String        @map("field_id")
  formField     FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  submissionId  String        @map("submission_id")
  submission    Submission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  value         String

  @@unique([submissionId, fieldId])
  @@map("field_responses")
}
